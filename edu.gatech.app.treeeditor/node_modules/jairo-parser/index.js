
var rdf = require('rdf-interfaces');
var rdf_ext = require('rdf-ext')(rdf);

var moduleName = 'jairo-parser';

var predefinedprefixesOfInterest = [
        { 'prefix' : 'rdf'                  , 'uri' : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'        },
        { 'prefix' : 'rdfs'                 , 'uri' : 'http://www.w3.org/2000/01/rdf-schema#'              },
        { 'prefix' : 'owl'                  , 'uri' : 'http://www.w3.org/2002/07/owl#'                     },
        { 'prefix' : 'foaf'                 , 'uri' : 'http://xmlns.com/foaf/0.1/'                         },
        { 'prefix' : 'dc'                   , 'uri' : 'http://purl.org/dc/elements/1.1/'                   }
    ];

function log( message , object , lineSpace ){
    if( !object )     object = '';
    if( lineSpace )   console.log('');
    console.log( message + '  ' + object);

}

function parse( mode , content , userDefinedPrefixes , callback ){
    log('parseJsonLd(mode=' + mode + ')' , null , true);

    var prefixesOfInterest;

    if( !userDefinedPrefixes ){
        prefixesOfInterest = predefinedprefixesOfInterest;
    }else{
        prefixesOfInterest = userDefinedPrefixes;
    }

    var parser;

    if( mode.toLowerCase() === 'rdfxml' ){
        parser = new rdf.RdfXmlParser();
    }else if( mode.toLowerCase() === 'jsonld' ){
        parser = new rdf.JsonLdParser();
    }else if( mode.toLowerCase() === 'turtle' ){
        parser = new rdf.TurtleParser();
    }else{
        log('mode must be "rdf" or "jsonld"' , null , true);
        return;
    }
    
    // create dict object
    var prefixes_dict = [];

    for (var i = 0; i < prefixesOfInterest.length; i++) {
        prefixes_dict[ prefixesOfInterest[i].prefix ] = prefixesOfInterest[i].uri;
        prefixes_dict[ prefixesOfInterest[i].uri ] = prefixesOfInterest[i].prefix;
    };

    var returnData = {};
    returnData.triples = [];
    returnData.prefixesOfInterest = prefixesOfInterest;
    returnData.prefixesParsed = [];
    returnData.prefixesParsedStat = [];

    try{
        parser.parse( content , function(graph) {

            var graphCounter = graph.length;

            if( graphCounter == 0 ){
                returnData.isError = false;
                returnData.errorMessage = '';
                callback(returnData);
            }
            
            graph.forEach(function(data){
                var triple = {};
                triple.subject_uri   = data.subject.nominalValue;
                triple.subject_uri   = '<' + triple.subject_uri + '>';

                triple.subject_qn    = data.subject.nominalValue.split('/').pop();
                triple.subject_qn    = triple.subject_qn.split('#').pop();


                triple.predicate_uri    = '<' + data.predicate.nominalValue + '>';
                
                var changeDetected = false;
                
                triple.predicate_qn = data.predicate.nominalValue;
                
                var orignal = data.predicate.nominalValue;

                var predicate_uri;
                for (var i = 0; i < prefixesOfInterest.length; i++) {

                    predicate_uri = prefixesOfInterest[i].uri;

                    triple.predicate_qn = 
                        triple.predicate_qn.replace( 
                            predicate_uri,
                            prefixes_dict[ predicate_uri ] + ':'
                        );

                    if( triple.predicate_qn !== orignal){
                        returnData.prefixesParsed[ triple.predicate_qn ] = predicate_uri;
                        
                        if( returnData.prefixesParsedStat[ triple.predicate_qn ] === undefined){
                            returnData.prefixesParsedStat[ triple.predicate_qn ] = 1;
                        }else{
                            returnData.prefixesParsedStat[ triple.predicate_qn ]++;
                        }
                        
                        break;
                    }
                };

                if( data.object.nominalValue.lastIndexOf('http', 0) === 0 ){
                    triple.object_uri   = '<' + data.object.nominalValue + '>';
                    triple.object_qn    = data.object.nominalValue.split('/').pop();
                    triple.object_qn    = triple.object_qn.split('#').pop();
                }else {
                    triple.object_uri   = data.object.nominalValue;
                    triple.object_qn = triple.object_uri;
                }

                if(triple.object_qn === '') triple.object_qn = triple.object_uri;

                returnData.triples.push(triple);
                graphCounter--;

                if(graphCounter === 0){
                    returnData.isError = false;
                    returnData.errorMessage = '';
                    callback(returnData);
                }
            }); 
        });

    }catch(err){
        returnData.isError = true;
        returnData.errorMessage = err.toString();
        callback(returnData);
    }
}


function printHumanReadbleResult( parsedRdfJson ){
    log('printHumanReadbleResult()', null, true);
    log('');

    if(parsedRdfJson.triples === undefined ){
        log('Not found array of triples in the given parameter' , null , true);
        return;
    }

    var triple;

    for (var i = 0; i < parsedRdfJson.triples.length; i++) {
        triple = parsedRdfJson.triples[i];
        log(
            triple.subject_uri +  
        '   ' + triple.predicate_qn + 
        '   ' + triple.object_uri  
        );
    };
    log('');

    log('===========================');
    log('Summary');
    log('===========================');
    log('Total (' + parsedRdfJson.triples.length + ') triples');
    log('');
    for (var prop in parsedRdfJson.prefixesParsedStat ) {
        log(prop + ' (' + parsedRdfJson.prefixesParsedStat[prop] + ') triples');
    }
    log('');

    log('===========================');
    log('prefixesOfInterest');
    log('===========================');
    for (var i = 0; i < parsedRdfJson.prefixesOfInterest.length; i++) {
        log(parsedRdfJson.prefixesOfInterest[i].prefix + ': <' + parsedRdfJson.prefixesOfInterest[i].uri + '>');
    }
    log('');

    log('===========================');
    log('prefixesParsed');
    log('===========================');
    for (var prop in parsedRdfJson.prefixesParsed ) {
        log(prop + ': <' + parsedRdfJson.prefixesParsed[prop] + '>');
    }
    log('');
}

module.exports.parse = function( mode , jsonLdFileContent , userDefinedPrefixes , callback ){
    parse( mode, jsonLdFileContent , userDefinedPrefixes , callback);
};

module.exports.printHumanReadbleResult = function( parsedRdfJson ){
    printHumanReadbleResult( parsedRdfJson );
};

